<?xml version="1.0"?>
<!-- 
Copyright 2012-2014 Eurocommercial Properties NV

Licensed under the Apache License, Version 2.0 (the "License"); 
you may not use this file except in compliance with the License. 
You may obtain a copy of the License at 

    http://www.apache.org/licenses/LICENSE-2.0
     
Unless required by applicable law or agreed to in writing, 
software distributed under the License is distributed on an 
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
either express or implied. See the License for the specific
language governing permissions and limitations under the License.
-->
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml -->
    <module name="JavadocPackage"/>
    <!--
    -->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
        <!-- 
    <module name="NewlineAtEndOfFile"/>
         -->

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <!--
    eg:
    //CHECKSTYLE.OFF: IllegalCatch - Much more readable than catching 7 exceptions
    catch (Exception e)
    //CHECKSTYLE.ON: IllegalCatch 
     -->
    <module name="SuppressionCommentFilter">
        <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
        <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
        <property name="checkFormat" value="$1"/>
    </module>

    <!--
    eg:
    // CHECKSTYLE IGNORE check FOR NEXT 1 LINES
    public void onClick(View view) { ... }     -->    
    <module name="SuppressWithNearbyCommentFilter">
        <property name="commentFormat" value="CHECKSTYLE.IGNORE (\w+) FOR NEXT (\d+) LINES"/>
        <property name="checkFormat" value="$1"/>
        <property name="influenceFormat" value="$2"/>
    </module>

    <module name="TreeWalker">

        <property name="cacheFile" value="${checkstyle.cache.file}"/>

        <!-- not available in eclipse-cs
        <module name="JavadocDeprecated"/>
        -->
        <module name="MissingOverride"/>
        
        <!-- ************************************************************** -->
        <!-- Checks that are different from the sun coding conventions ones -->
        <!-- ************************************************************** -->
        <property name="tabWidth" value="4"/>
        <module name="LeftCurly">
          <property name="option" value="eol"/>
        </module>
        <module name="RightCurly">
          <property name="option" value="same"/>
        </module>
        <module name="MemberName">
          <property name="format" value="^[a-z]([a-zA-Z0-9])*$"/>
        </module>
        <module name="StaticVariableName">
          <property name="format" value="^[A-Z](_?[A-Z0-9])*$"/>
        </module>
        <module name="MethodName">
          <property name="format" value="[a-z](_?[a-zA-Z0-9]+)*$"/>
        </module>
        <module name="ParameterName">
          <property name="format" value="[a-z]([a-zA-Z0-9]+)*$"/>
        </module>
        <module name="LocalVariableName">
          <property name="format" value="[a-z]([a-zA-Z0-9]+)*$"/>
        </module>
        
        <!-- ************************************************************** -->
        <!-- Default Sun coding conventions checks                          -->
        <!-- ************************************************************** -->

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
     
        <!-- TODO: instate at some point (though only for public methods   
        <module name="JavadocType"/>
        -->
        <!-- 
        <module name="JavadocMethod"/>
        <module name="JavadocVariable"/>
         -->


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="PackageName"/>
        <module name="TypeName"/>
        <module name="LocalFinalVariableName"/>


        <!-- Checks for Headers                              -->
        <!-- See http://checkstyle.sf.net/config_header.html -->
                <!--         
        <module name="Header">
         -->
            <!-- The follow property value demonstrates the ability     -->
            <!-- to have access to ANT properties. In this case it uses -->
            <!-- the ${basedir} property to allow Checkstyle to be run  -->
            <!-- from any directory within a project.                   -->
                    <!--             
            <property name="headerFile" value="${checkstyle.header.file}"/>
        </module>
         -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

    
        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="EmptyBlock"/>
        <module name="NeedBraces"/>
        <!-- 
        <module name="AvoidNestedBlocks"/>
         -->


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="EmptyStatement"/>
        <module name="MagicNumber"/>
        <module name="MissingSwitchDefault"/>
        <module name="RedundantThrows"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        
        <!-- not supported in maven 
        <module name="DoubleCheckedLocking"/>  
         -->
        <!-- 
        <module name="AvoidInlineConditionals"/>
        <module name="EqualsHashCode"/>
        <module name="HiddenField"/>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
         -->

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!-- 
        
        <module name="VisibilityModifier"/>
         -->
         <!-- too many violations... 
         <module name="DesignForExtension"/>
          -->
         <module name="FinalClass"/>
         <module name="HideUtilityClassConstructor"/>
         <module name="InterfaceIsType"/>

         
         <module name="CyclomaticComplexity">
            <property name="max" value="12"/>
         </module>
         <module name="NPathComplexity">
            <property name="max" value="160"/>
        </module>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <!-- 
        <module name="ArrayTypeStyle"/>
        <module name="GenericIllegalRegexp">
            <property name="format" value="\s+$"/>
            <property name="message" value="Line has trailing spaces."/>
        </module>
         -->
         <!-- removed; we detect these in other ways. 
        <module name="TodoComment"/>
          -->
        <module name="UpperEll"/>
        <module name="FinalParameters"/>
         
        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <!-- 
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>
        <module name="TabCharacter"/>
         -->
        <module name="EmptyForIteratorPad"/>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <!-- 
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>
         -->
         
        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
         <module name="LineLength">
            <property name="max" value="120"/>
        </module>
        <module name="MethodLength">
            <property name="max" value="30"/>
        </module>
        <module name="ParameterNumber">
            <property name="max" value="6"/>
        </module>

    </module>
    
    

    <module name="FileLength">
        <property name="max" value="1500"/>
    </module>

    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
        <property name="fileExtensions" value="java,xml"/>
    </module>

</module>
